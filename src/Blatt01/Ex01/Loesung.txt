            a       b       c
Stelle  1:  5       -       {16, 4, 2, 9}
Stelle  2:  23      0       -
Stelle  3:  5       -       {16, 4, 2, 9}
Stelle  4:  5       -1      {16, 4, 2, 9}
Stelle  5:  2       -       {16, 0, 2, 9}
Stelle  6:  2       2       {16, 0, 0, 9}
Stelle  7:  3       -       {16, 0, 0, 9}
Stelle  8:  23      19      -
Stelle  9:  3       23      {16, 0, 0, 9}
Stelle 10:  5       -       { 0, 0, 0, 0}
Stelle 11:  4       12      { 0, 0, 0, 0}
Stelle 12:  23      4       -
Stelle 13:  23      -       { 0, 0, 0, 0}
Stelle 14:  23      23      -
Stelle 15:  23      12      { 0, 0, 0, 0}


Call-by-Value (CbV) vs. Call-by-Reference (CbR)
===============================================

Wird eine Methode mit CbV aufgerufen, werden nur die Inhalte
der Parametervariablen übergeben, es werden also neue lokale
Variablen als Kopien erstellt.
Im Gegensatz dazu werden bei CbR Variablenaddressen übergeben
und somit der Speicherplatz der ursprünglichen Variablen. Diese
kann dann "inplace" verändert werden. Dies ist natürlich
kritisch, wenn Seiteneffekte nicht erwünscht sind und/oder
die Referenz auch an Dritte weitergegeben wird.
Java macht standardmäßig IMMER CbV. Dies ist für primitive
Datentypen intuitiv. Jedoch ist Vorsicht geboten bei allen
nicht-primitiven Datentypen wie Arrays, Objekten und sogar
Strings (intern char-Arrays). Diese werden nämlich nicht etwa
shallow (gescheige denn deep) kopiert.
Sondern der Value dieser Datentypene IST ihre "Referenz", ihr
Adresse im Speicher, von wo aus auf die einzelnen Inhalte
verwiesen wird. Das erklärt, warum ein Objekt/Array, das an eine
Methode übergeben wurde mit nachher u.U. verändert ist.
